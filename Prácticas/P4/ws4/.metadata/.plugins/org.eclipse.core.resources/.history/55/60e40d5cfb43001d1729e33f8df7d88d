/**
 * 
 */
package uo.ri.cws.application.business.invoice.create.commands;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import assertion.Argument;
import console.Console;
import uo.ri.cws.application.business.mechanic.MechanicService.MechanicBLDto;

/**
 * @author UO285176
 *
 */
public class FindNotInvoicedWorkOrders {
	private static final String URL = "jdbc:hsqldb:hsql://localhost";
	private static final String USER = "sa";
	private static final String PASS = "";
	String dniIn = null;

	/**
	 * Process:
	 * 
	 *   - Ask customer dni
	 *    
	 *   - Display all uncharged workorder  
	 *   		(state <> 'INVOICED'). For each workorder, display 
	 *   		id, vehicle id, date, state, amount and description
	 */

	private static final String SQL =
		"select a.id, a.description, a.date, a.state, a.amount " +
		"from TWorkOrders as a, TVehicles as v, TClients as c " +
		"where a.vehicle_id = v.id " +
		"	and v.client_id = c.id " +
		"	and state <> 'INVOICED'" +
		"	and dni like ?";
	
	public FindNotInvoicedWorkOrders(String dni) {
		Argument.isNotNull(dni);
		dniIn = dni;
	}

	public List<MechanicBLDto> execute() {
		List<MechanicBLDto> mechanics = new ArrayList<>();
		Connection c = null;
		PreparedStatement pst = null;
		ResultSet rs = null;

		try {
			c = DriverManager.getConnection(URL, USER, PASS);
			
			pst = c.prepareStatement(SQL);
			pst.setString(1, dniIn);
			
			rs = pst.executeQuery();
			while(rs.next()) {
				MechanicBLDto mechanic = new MechanicBLDto();
				mechanic.id = rs.getString("id");
				mechanic.dni = rs.getString("dni");
				mechanic.name = rs.getString("name");
				mechanic.surname = rs.getString("surname");
				mechanic.version = rs.getLong("version");
				mechanics.add(mechanic);
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		finally {
			if (rs != null) try { rs.close(); } catch(SQLException e) { /* ignore */ }
			if (pst != null) try { pst.close(); } catch(SQLException e) { /* ignore */ }
			if (c != null) try { c.close(); } catch(SQLException e) { /* ignore */ }
		}
		return mechanics;
	}
}
