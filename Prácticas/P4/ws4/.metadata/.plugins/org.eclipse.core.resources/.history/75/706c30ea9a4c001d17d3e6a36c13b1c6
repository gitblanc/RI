/**
 * 
 */
package uo.ri.cws.application.business.invoice.create.commands;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import assertion.Argument;
import uo.ri.cws.application.business.invoice.InvoicingService.InvoiceBLDto;
import uo.ri.cws.application.business.invoice.InvoicingService.WorkOrderForInvoicingBLDto;
import uo.ri.cws.application.business.invoice.assembler.InvoicingAssembler;
import uo.ri.cws.application.business.mechanic.MechanicService.MechanicBLDto;
import uo.ri.cws.application.business.util.BusinessCheck;
import uo.ri.cws.application.business.util.command.Command;
import uo.ri.cws.application.persistence.PersistenceFactory;
import uo.ri.cws.application.persistence.invoice.InvoiceGateway;
import uo.ri.cws.application.persistence.invoice.assembler.InvoiceAssembler;

/**
 * @author UO285176
 *
 */
public class FindNotInvoicedWorkOrders implements Command<InvoiceBLDto>{
	
	WorkOrderForInvoicingBLDto workOrder = new WorkOrderForInvoicingBLDto();

	public FindNotInvoicedWorkOrders(String dni) {
		Argument.isNotEmpty(dni, "The dni can't be null");
		workOrder.id = dni;
	}

	public List<WorkOrderForInvoicingBLDto> execute() {
		List<WorkOrderForInvoicingBLDto> workOrders = new ArrayList<>();
		InvoiceGateway ig = PersistenceFactory.forInvoice();
		//Comprobación de si el cliente existe
		BusinessCheck.isTrue(!ig.findById(workOrder.id).isEmpty(), "The client of the invoice doesn't exist");
		
		workOrders = InvoicingAssembler.toInvoicingWorkOrderList(null);
		return workOrders;
	}
}
