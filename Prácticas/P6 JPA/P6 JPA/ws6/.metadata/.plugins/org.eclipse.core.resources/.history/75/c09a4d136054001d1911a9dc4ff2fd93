package uo.ri.cws.domain;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

public class WorkOrder {
    public enum WorkOrderState {
	OPEN, ASSIGNED, FINISHED, INVOICED
    }

    // natural attributes
    private LocalDateTime date;
    private String description;
    private double amount = 0.0;
    private WorkOrderState state = WorkOrderState.OPEN;

    // accidental attributes
    private Vehicle vehicle;
    private Mechanic mechanic;
    private Invoice invoice;
    private Set<Intervention> interventions = new HashSet<>();

    public WorkOrder(Vehicle v, String desc) {
	// VALIDAR FALTA
	this.description = desc;
	this.date = LocalDateTime.now();
	// this.vehicle = v; NO - colase dedicada
	Associations.Fix.link(v, this);
	Associations.Assign.link(mechanic, this);
    }

    @Override
    public String toString() {
	return "WorkOrder [date=" + date + ", vehicle=" + vehicle + "]";
    }

    @Override
    public int hashCode() {
	return Objects.hash(date, vehicle);
    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj)
	    return true;
	if (obj == null)
	    return false;
	if (getClass() != obj.getClass())
	    return false;
	WorkOrder other = (WorkOrder) obj;
	return Objects.equals(date, other.date)
		&& Objects.equals(vehicle, other.vehicle);
    }

    /**
     * Changes it to INVOICED state given the right conditions This method is
     * called from Invoice.addWorkOrder(...)
     * 
     * @see UML_State diagrams on the problem statement document
     * @throws IllegalStateException if - The work order is not FINISHED, or -
     *                               The work order is not linked with the
     *                               invoice
     */
    public void markAsInvoiced() {

    }

    /**
     * Changes it to FINISHED state given the right conditions and computes the
     * amount and unlinks from the previous mechanic.
     *
     * @see UML_State diagrams on the problem statement document
     * @throws IllegalStateException if - The work order is not in ASSIGNED
     *                               state, or - The work order is not linked
     *                               with a mechanic
     */
    public void markAsFinished() {

    }

    /**
     * Changes it back to FINISHED state given the right conditions This method
     * is called from Invoice.removeWorkOrder(...)
     * 
     * @see UML_State diagrams on the problem statement document
     * @throws IllegalStateException if - The work order is not INVOICED, or -
     *                               The work order is still linked with the
     *                               invoice
     */
    public void markBackToFinished() {

    }

    /**
     * Links (assigns) the work order to a mechanic and then changes its state
     * to ASSIGNED
     * 
     * @see UML_State diagrams on the problem statement document
     * @throws IllegalStateException if - The work order is not in OPEN state,
     *                               or - The work order is already linked with
     *                               another mechanic
     */
    public void assignTo(Mechanic mechanic) {

    }

    /**
     * Unlinks (deassigns) the work order and the mechanic and then changes its
     * state back to OPEN
     * 
     * @see UML_State diagrams on the problem statement document
     * @throws IllegalStateException if - The work order is not in ASSIGNED
     *                               state
     */
    public void desassign() {

    }

    /**
     * In order to assign a work order to another mechanic is first have to be
     * moved back to OPEN state.
     * 
     * @see UML_State diagrams on the problem statement document
     * @throws IllegalStateException if - The work order is not in FINISHED
     *                               state
     */
    public void reopen() {

    }

    public Set<Intervention> getInterventions() {
	return new HashSet<>(interventions);
    }

    Set<Intervention> _getInterventions() {
	return interventions;
    }

    void _setVehicle(Vehicle vehicle) {
	this.vehicle = vehicle;
    }

    void _setMechanic(Mechanic mechanic) {
	this.mechanic = mechanic;
    }

    void _setInvoice(Invoice invoice) {
	this.invoice = invoice;
    }

    public LocalDateTime getDate() {
	return date;
    }

    public String getDescription() {
	return description;
    }

    public double getAmount() {
	return amount;
    }

    public WorkOrderState getState() {
	return state;
    }

    public Vehicle getVehicle() {
	return vehicle;
    }

    public Mechanic getMechanic() {
	return mechanic;
    }

    public Invoice getInvoice() {
	return invoice;
    }
}
