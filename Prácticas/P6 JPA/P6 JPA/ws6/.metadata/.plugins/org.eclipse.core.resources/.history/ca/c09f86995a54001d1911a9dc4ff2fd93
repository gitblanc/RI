package uo.ri.cws.domain;

import java.util.Collection;
import java.util.Iterator;
import java.util.Objects;
import java.util.Set;

import uo.ri.util.assertion.ArgumentChecks;

public class Client {
    /*
     * Atributos naturales
     */
    private String dni; // identidad natural
    private String name;
    private String surname;
    private String email;
    private String phone;
    private Address address;

    /*
     * Atributos accidentales
     */
    private Set<Vehicle> vehicles = new Set<Vehicle>() {

	@Override
	public <T> T[] toArray(T[] a) {
	    // TODO Auto-generated method stub
	    return null;
	}

	@Override
	public Object[] toArray() {
	    // TODO Auto-generated method stub
	    return null;
	}

	@Override
	public int size() {
	    // TODO Auto-generated method stub
	    return 0;
	}

	@Override
	public boolean retainAll(Collection<?> c) {
	    // TODO Auto-generated method stub
	    return false;
	}

	@Override
	public boolean removeAll(Collection<?> c) {
	    // TODO Auto-generated method stub
	    return false;
	}

	@Override
	public boolean remove(Object o) {
	    // TODO Auto-generated method stub
	    return false;
	}

	@Override
	public Iterator<Vehicle> iterator() {
	    // TODO Auto-generated method stub
	    return null;
	}

	@Override
	public boolean isEmpty() {
	    // TODO Auto-generated method stub
	    return false;
	}

	@Override
	public boolean containsAll(Collection<?> c) {
	    // TODO Auto-generated method stub
	    return false;
	}

	@Override
	public boolean contains(Object o) {
	    // TODO Auto-generated method stub
	    return false;
	}

	@Override
	public void clear() {
	    // TODO Auto-generated method stub

	}

	@Override
	public boolean addAll(Collection<? extends Vehicle> c) {
	    // TODO Auto-generated method stub
	    return false;
	}

	@Override
	public boolean add(Vehicle e) {
	    // TODO Auto-generated method stub
	    return false;
	}
    };

    public Client(String dni, String nombre, String apellidos) {
	ArgumentChecks.isNotNull(dni, "The dni can't be null");
	ArgumentChecks.isNotNull(nombre, "The name can't be null");
	ArgumentChecks.isNotNull(apellidos, "The surname can't be null");
	ArgumentChecks.isNotEmpty(dni, "The dni can't be empty");
	ArgumentChecks.isNotEmpty(nombre, "The name can't be empty");
	ArgumentChecks.isNotNull(apellidos, "The surname can't be empty");
	this.dni = dni;
	this.name = nombre;
	this.surname = apellidos;
    }

    public String getDni() {
	return dni;
    }

    public String getName() {
	return name;
    }

    public String getSurname() {
	return surname;
    }

    public String getEmail() {
	return email;
    }

    public String getPhone() {
	return phone;
    }

    public Address getAddress() {
	return address;
    }

    @Override
    public String toString() {
	return "Client [dni=" + dni + ", name=" + name + ", surname=" + surname
		+ ", email=" + email + ", phone=" + phone + ", address="
		+ address + "]";
    }

    @Override
    public int hashCode() {
	return Objects.hash(dni);
    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj)
	    return true;
	if (obj == null)
	    return false;
	if (getClass() != obj.getClass())
	    return false;
	Client other = (Client) obj;
	return Objects.equals(dni, other.dni);
    }
}
