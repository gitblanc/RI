package uo.ri.cws.application.service.mechanic.crud.command;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import uo.ri.cws.application.service.BusinessException;
import uo.ri.cws.application.service.mechanic.MechanicCrudService.MechanicDto;
import uo.ri.cws.domain.Mechanic;
import uo.ri.util.assertion.ArgumentChecks;

public class AddMechanic {

	private MechanicDto dto;

	public AddMechanic(MechanicDto dto) {
		ArgumentChecks.isNotNull(dto, "The mechanic can't be null");
		ArgumentChecks.isNotNull(dto.dni, "The mechanic dni can't be null");
		ArgumentChecks.isNotEmpty(dto.dni, "The mechanic dni can't be empty");
		ArgumentChecks.isNotBlank(dto.dni, "The mechanic dni can't be blank");
		ArgumentChecks.isNotNull(dto.name, "The mechanic name can't be null");
		ArgumentChecks.isNotEmpty(dto.name, "The mechanic name can't be empty");
		ArgumentChecks.isNotBlank(dto.name, "The mechanic name can't be blank");
		ArgumentChecks.isNotNull(dto.surname, "The mechanic surname can't be null");
		ArgumentChecks.isNotEmpty(dto.surname, "The mechanic surname can't be empty");
		ArgumentChecks.isNotBlank(dto.surname, "The mechanic surname can't be blank");
		this.dto = dto;
	}

	public MechanicDto execute() throws BusinessException {
		// NECESITAMOS un Entity manager
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("carworkshop");
		EntityManager em = emf.createEntityManager();

		//Comprobar que no hay un mecanico con el mismo dni
		TypedQuery<Mechanic> tq = em.createNamedQuery("Mechanic.findByDni", Mechanic.class);
		//Obtenemos los resultados NO USAR getSingleResult()
		tq.getRe
		
		// el emf ha de hablar con la bbdd y guardar la informacion
		Mechanic m = new Mechanic(dto.dni, dto.name, dto.surname);
		em.persist(m);
		dto.id = m.getId();
		
		return dto;
	}

}
