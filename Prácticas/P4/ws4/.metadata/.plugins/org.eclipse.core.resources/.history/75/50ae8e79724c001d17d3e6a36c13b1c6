/**
 * 
 */
package uo.ri.cws.application.business.mechanic.crud;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import assertion.Argument;
import uo.ri.cws.application.business.BusinessException;
import uo.ri.cws.application.business.mechanic.MechanicService.MechanicBLDto;
import uo.ri.cws.application.business.util.BusinessCheck;
import uo.ri.cws.application.business.util.command.Command;
import uo.ri.cws.application.persistence.PersistenceFactory;
import uo.ri.cws.application.persistence.mechanic.MechanicGateway;

/**
 * @author UO285176
 *
 */
public class DeleteMechanic implements Command<MechanicBLDto>{

	private MechanicBLDto mechanic = null;

	public DeleteMechanic(String idMechanic) {
		Argument.isNotNull(idMechanic, "The mechanic id can't be null");
		Argument.isNotEmpty(idMechanic, "The mechanic id can't be empty");
		this.mechanic.id = idMechanic;
	}

	@Override
	public MechanicBLDto execute() throws BusinessException{
		MechanicGateway mg = PersistenceFactory.forMechanic();
		//Comprobación de que el mecánico no exista
		BusinessCheck.isTrue(!mg.findByDni(mechanic.dni).isEmpty(), "The mechanic doesn't exist");
//		//Comprobación de que no hay ningún work order para este mecánico
//		BusinessCheck.isTrue(mg.findAllMechanicWorkOrders(mechanic.dni).isEmpty(), "The mechanic still have some work orders");
//		//Comprobación de si hay contratos para este mecánico
//		BusinessCheck.isTrue(mg.findAllMechanicContracts(mechanic.dni).isEmpty(), "The mechanic still have some work orders");
		return null;
	}
}
